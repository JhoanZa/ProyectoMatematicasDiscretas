@page "/class-1/exercise-3"
@inject CharacterService CharacterService
@using ProyectoMatematicasDiscretas.Data;
<PageTitle>Ejercicio 1-3</PageTitle>

<h3>Codificador Huffman</h3>
<h6>La longitud del camino es: @lengthPath</h6>

<EditForm Model="@characters" OnValidSubmit="@GenerateCode">
<table class="table">
    <thead>
        <tr>
            <th class="col-xl-3">Letra</th>
            <th class="col-xl-3">Peso</th>
            <th class="col-xl-3">Código</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var character in characters)        
        {
            <tr class="">
                <th>@character.Symbol</th>
                <th><InputNumber @bind-Value="character.Weight"/></th>
                <th>@character.Code</th>
            </tr>             
        }
    </tbody>
</table>
<button type="submit">Generar Codigos</button>
</EditForm>



@code {
    private int lengthPath = 0;
    private List<Character> characters = new List<Character>();

    protected override async Task OnInitializedAsync()
    {
        characters = await CharacterService.GetCharactersListAsync();
    }

    private void GenerateCode()
    {
        lengthPath = 0;
        characters = GenerateHuffmanCodes(characters.Where(c => c.Weight != 0).ToList());
        characters.Sort((c1, c2) => c1.Symbol.CompareTo(c2.Symbol));

        foreach (Character character in characters)
        {
            lengthPath += character.Weight * character.Code.Length;
        }

    }

    private List<Character> GenerateHuffmanCodes(List<Character> characters)
    {
        while (characters.Count > 1)
        {
            characters = characters.OrderBy(c => c.Weight).ToList();

            Character first = characters[0];
            Character second = characters[1];

            characters.RemoveRange(0, 2);
            Character combined = new Character{
                Weight = first.Weight + second.Weight
            };
            combined.Left = first;
            combined.Right = second;

            characters.Add(combined);
        }

        Character root = characters[0];
        List<Character> charactersWithCodes = GenerateHuffmanCodes(root, "");

        return charactersWithCodes;
    }

    private List<Character> GenerateHuffmanCodes(Character character, string code)
    {
        List<Character> charactersWithCodes = new List<Character>();

        if (character.Left == null && character.Right == null)
        {
            character.Code = code;
            charactersWithCodes.Add(character);
        }
        else
        {
            charactersWithCodes.AddRange(GenerateHuffmanCodes(character.Left, code + "0"));
            charactersWithCodes.AddRange(GenerateHuffmanCodes(character.Right, code + "1"));
        }

        return charactersWithCodes;
    }
}
